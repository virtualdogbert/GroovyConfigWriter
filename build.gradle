plugins {
    id 'groovy'
    id 'maven-publish'
    id "org.asciidoctor.gradle.asciidoctor" version "1.5.1"
    id 'idea'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

// sourceCompatibility has to be placed after applying the Groovy (Java) Plugin:
// See https://stackoverflow.com/questions/21028438/gradle-sourcecompatibility-has-no-effect-to-subprojects
sourceCompatibility = 1.8

group = "io.github.virtualdogbert"
version = "1.1"
description = "This library provides a writer for Groovy base configuration, that can be parsed by the ConfigSlurper."


wrapper {
    gradleVersion = '5.0'
}


repositories {
    mavenCentral()
}

sourceSets {
    main.groovy.srcDir 'src'
    test.groovy.srcDir 'test'
}

dependencies {
    compileOnly(
            'org.codehaus.groovy:groovy-all:2.5.4',
            'org.slf4j:slf4j-api:1.6.1',
            'ch.qos.logback:logback-classic:0.9.28'
    )

    testCompileOnly(
            'junit:junit:4.12',
            'org.codehaus.groovy:groovy-all:2.4.11',
            'org.spockframework:spock-core:1.0-groovy-2.4',
            'ch.qos.logback:logback-classic:0.9.28',
            'org.yaml:snakeyaml:1.18'
    )
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}


ext {
    theTitle = 'Groovy Config Writer'
    titleForDocumentation = archivesBaseName + ' ' + version
    packageTitle = group
    description = description
}

task jarDoc(type: Jar, dependsOn: [javadoc, groovydoc]) {
    classifier = 'javadoc'
    from docsDir
}

javadoc {
    options.overview('overview.html')
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(titleForDocumentation)
    options.docTitle(titleForDocumentation)
    doFirst {
        javadoc.title = titleForDocumentation
        javadoc.options.docTitle = javadoc.title
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

groovydoc {
    dependsOn(classes)
    includePrivate = true
    use = true
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    include 'com/virtualdogbert/**'
}

publishing {
    publications {
        maven(MavenPublication) {

            groupId = project.group
            artifactId = 'GroovyConfigWriter'
            version = project.version

            from components.java

            artifact(sourceJar) {
                classifier "sources"
            }

            artifact jarDoc {
                classifier = 'javadoc'
            }

            pom {
                name = 'Groovy Config Writer'
                description = 'This library provides a writer for Groovy base configuration, that can be parsed by the ConfigSlurper.'
                url = 'https://github.com/virtualdogbert/groovyConfigWriter'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'virtualdogbert'
                        name = 'Tucker J. Pelletier'
                        email = 'virtualdogbert@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/virtualdogbert/groovyConfigWriter.git'
                    developerConnection = 'scm:git:ssh://github.com:virtualdogbert/groovyConfigWriter.git'
                    url = 'https://github.com/virtualdogbert/groovyConfigWriter/tree/master'
                }
            }
        }


    }
}

task jarSrc(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(jarSrc)
    archives(jarDoc)
}

String getPropertyOrUseDefault(String propertyName, String defaultValue) {
    hasProperty(propertyName) ? getProperty(propertyName) : defaultValue
}

def asciidoctorAttributes = [
        copyright           : 'Apache License, Version 2.0',
        docinfo1            : 'true',
        doctype             : 'book',
        encoding            : 'utf-8',
        'front-cover-image' : 'image:cover.png[Front Cover,800,600]',
        icons               : 'font',
        id                  : project.name + ':' + project.version,
        idprefix            : '',
        idseparator         : '-',
        lang                : 'en',
        linkattrs           : true,
        numbered            : '',
        producer            : 'Asciidoctor',
        revnumber           : project.version,
        setanchors          : true,
        'source-highlighter': 'prettify',
        toc                 : 'left',
        toc2                : '',
        toclevels           : '2'
]

import org.asciidoctor.gradle.AsciidoctorTask

tasks.withType(AsciidoctorTask) {
    attributes asciidoctorAttributes
    outputDir new File(buildDir, 'docs')
    separateOutputDirs = false
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
    }
}

task asciidoc(type: AsciidoctorTask, description: 'Generates single-page HTML') {
    backends 'html5'
}

task docs(dependsOn: [asciidoc]) {

    File dir = new File(buildDir, 'docs')

    copy {
        from 'src/docs'
        into new File(buildDir, 'docs').path
        include '**/*.png'
    }
}


afterEvaluate {
    signing {
         //required { gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishMavenPublicationToMavenLocal") }
        sign publishing.publications.maven
    }
}

nexusPublishing {
   repositories {
       sonatype {
           def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
           def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
           def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
           nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
           snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
           username = ossUser
           password = ossPass
           stagingProfileId = ossStagingProfileId
       }
   }
}
